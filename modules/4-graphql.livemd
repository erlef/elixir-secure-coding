# ESCT: Part 4 - GraphQL Security

## Introduction

GraphQL is a query language used to interact with and retrieve data from an application's data sources. It's structure is designed for flexible and precise queries that efficiently interact with complex, highly nested data sets.  Using GraphQL, information is retrieved by stepping through data as if it were arranged as a group of connected nodes instead of a strictly hierarchical set up. Think more of a labyrinth than a tree.  GraphQL can be implemented as a component of an application's API and has two main security considerations:

* Security concerns common to all APIs 
* Security related to characteristics of the query language itself

This module will highlight several security issues associated with GraphQL and recommendations for how to address. 

## Table of Contents

* [Disabling Introspection](#disabling-introspection)
* [Error Disclosure](#error-disclosure)
* [Resource Exhaustion](#resource-exhaustion)
* [Cost Theory](#cost-theory)

## Disabling Introspection

### Description

Introspection queries are a way of enumerating a particular GraphQL implementation to discover details about the queries supported, data types available, and other information. This includes mutation names, fields specific to an organization / dataset, query parameters, and types of objects in the data source,  all of which can help a user, including a malicious one, deduce and discover specifics about the data being stored. 

If you are familiar with databases, this is similar to gathering info on the [database schema]( https://en.wikipedia.org/wiki/Database_schema) that includes information about table names, fields, database, structure etc.

This information can help a malicious actor in their information gathering/reconnaissnce efforts as they look for ways to attack your application and construct malicious queries and requests to compromise data.

### Prevention

Best practice per OWASP is to limit access, including following least privilege, to introspection queries if it is not possible completely disable it. Please see references for more details.

### References
https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/12-API_Testing/01-Testing_GraphQL

https://cybervelia.com/?p=736

### <span style="color:blue;">Example</span> / <span style="color:red;">Quiz</span>

```
Which of the OWASP API Security Top 10 2019 issues does disabling introspection queries address?
a) API6:2019 Mass Assignment
b) API10:2019 Insufficient Logging & Monitoring
c) API3:2019 Excessive Data Exposure
d) API4:2019 Lack of Resources & Rate Limiting
```

## Error Disclosure

### Description

One of OWASP’s top 10 security risksfor API’s is API7:2019 Security Misconfiguration includes verbose error messages that can unintentionally provide information to help a malicious actor craft an attack on an application or otherwise exploit the api.  It is a best practice to limit the amount of valuable/meaningful information that gets sent back to any user in the event there is an issue with a service, or other application component, including APIs.

Within the context of a GraphQL implementation, when errors occur, the server could send error messages that reveal internal details, application configurations, or data which if triggered by a malicious actor, could be used to further an attack on the application.   

### Prevention

OWASP recommends explicitly defining and enforcing all API response payload schemas including error messages.
Any errors disclosed from the server and displayed to the user should be limited and boring.

### <span style="color:blue;">Example</span> / <span style="color:red;">Quiz</span>

Select the best example of a “good” error message, from the perspective of developer who is writing code that is intended to inform a user (who may or may not be a malicious actor) that the action they have attempted was unsuccessful:

1 - 
```
HTTP/2 401 Unauthorized
Date: Tues, 16 Aug 2022 21:06:42 GMT
…
{
	“error”:”token expired”
{
```

2-
```
HTTP/2 200 OK
Date: Tues, 16 Aug 2021 22:06:42 GMT
…
{
	“errors”:[
		{
			“locations”:[
			{
				“column”:2,
				:line”:2
			}
			],
			“message”: “Parsing failed at 
		}
	]
}
```
3-
```
HTTP/2 200 OK
Date: Tues, 16 Aug 2022 21:06:42 GMT
…
{
	“error”:”ID token for user 55e4cb07 at org 1234 expired”
{
```
4- 
```
HTTP/2 404 File Not Found
Date: Tues, 16 Aug 2022 21:06:42 GMT
…
{
	“error”:”/www/home/file.txt not found ”
{
```
### References
1. https://github.com/OWASP/API-Security/blob/master/2019/en/src/0xa7-security-misconfiguration.md
2. https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/12-API_Testing/01-Testing_GraphQL


## Resource Exhaustion

### Description

When building an application, it is necessary to manage the access and use of all relevant internal and external resources involved in the context of the application.  This will help ensure the continued availablilty of the application and it's functionality for all legitimate users and entities.

Resource exhaustion occurs when memory, processes handling application requests, network traffic being generated, server capacity, and other host operating system, network, or device limitations are exceeded while an application is running.  When resource allocation is not well managed, applications become vulnerable to negative impacts in performance, unintentional service failures, and denial of service attacks, in which a malicious actor takes advantage of resource limitations to intentionally overwhelm and crash a system.  

Resource exhaustion can occur inadvertently through legitimate use or could be triggered intentionally in a ddos attacks by a maliciou acctor who send a large number or heavy requests to overload the application.  

The structure of GraphQL queries make it particularly succeptible to this type of attack. Servers that handle GraphQL requests originate from untrusted input; from client requests.   Client requests are user/attacker controlled input (context unvalidated/unsanitized input)
Queries that take a long time to process/traverse data/retrieve data consume 
Long operations 
In addition to sanizatizing input - consider ways to measure the cost of a query.  Next section covers one approach.


### Prevention

Refer to the Rate Limiting Lesson in Part 3 - Secure SDLC Concepts

Input Validation and Sanitization.
Attack vector is a query that is not checked for size, depth, (OWASP issues -> ) Secure coding practice of validation all input. Parameterizing queries.
Implementing checks in your code for queries / operations that that perform resource exhaustive actions or calls.




### <span style="color:blue;">Example</span> / <span style="color:red;">Quiz</span>
Example of code where input is validated and where it isn't:


<!-- livebook:{"branch_parent_index":4} -->

## Cost Theory

### Description

One approach for implementing validation on incoming queries to determine their "cost" in terms of the resources the use.  Queries are defined by how much load they place on the server/service processing the request 

This approach also helps implement Rate limiting by establishing a query cost based on the type, operation, and expected performance of each unique GraphQL request for data, and by anticipating the load on the server.

More details of this approach are described in the reference below.

### References
https://shopify.engineering/rate-limiting-graphql-apis-calculating-query-complexity

### GraphQl References
https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html
https://owasp.org/www-project-api-security/
https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/12-API_Testing/01-Testing_GraphQL
https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html
https://owasp.org/www-project-api-security/  
https://www.howtographql.com/advanced/4-security/
(https://hexdocs.pm/hammer/tutorial.html)
<!-- livebook:{"branch_parent_index":4} -->


[**<- Previous Module: Secure SDLC Concepts**](./3-ssdlc.livemd) || [**Next Module: Elixir Security ->**](./5-elixir.livemd)
